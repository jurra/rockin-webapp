'''
Story: Users need to add cuttings to the database
Considerations: 
- Cuttings also have collection method, drilling method, sample weight, dried sample, dried by, dried date

'''

import pytest

import datamodel
from pydantic import ValidationError
from crudapp.models import Cuttings


def generate_cuttings_name():
    '''
    AC: Cuttings name is generated automatically
    '''
    pass   


# @pytest.fixture
# def cuttings_object():
#     return Cuttings(
#         cuttings_number=1,
#         cuttings_name="DELGT01-53",
#         cuttings_depth=100.00,
#         sample_state="Wet washed",
#         collection_method="Drilling",
#         drilling_method="Rotary",
#         sample_weight=50.00,
#         dried_sample=True,
#         dried_by="user1",
#         dried_date="2023-01-01 12:00:00"
#     )


@pytest.fixture
def serialized_cuttings_object():
    return {
            "id": 1, # This is not needed as it is autogenerated
            "registration_date": "2020-01-01 12:00:00",
            "well": 'Test Well',
            "registered_by" : 'John Doe',
            "collection_date": "2020-01-01 12:00:00",
            "remarks": "Sample core",
            # "planned_core_number": "C1",
            "drilling_mud": "Water-based mud",
            "lithology": "Sandstone",
            "cuttings_number": 1,
            "cuttings_name": "DELGT01-53",
            "cuttings_depth": 100.00,
            "sample_state": "Wet washed",
            "collection_method": "Drilling",
            "drilling_method": "Rotary",
            "sample_weight": 50.00,
            "dried_sample": True,
            "dried_by": "user1",
            "dried_date": "2023-01-01 12:00:00"
        }
@pytest.mark.django_db
def test_cuttings_creation(serialized_cuttings_object, well, user):
    '''
    AC: Cuttins is created in the database respecting the datamodel
    '''
    # Create a cuttings object
    with pytest.raises(ValueError):
        cuttings = Cuttings.objects.create(**serialized_cuttings_object)

    # Prepare serialized data to be saved in the database
    data = serialized_cuttings_object.copy()
    data["well"] = well
    data["registered_by"] = user

    cuttings = Cuttings.objects.create(**data)

    assert cuttings.well == data["well"]


def test_cuttings_validation(serialized_cuttings_object):
    '''
    AC: Data passed to the form as a post requested should be validated
    '''
    # Valid data
    datamodel.models.cuttings.Cuttings(**serialized_cuttings_object)

    # Remove some fields from the serialized object
    del serialized_cuttings_object["cuttings_number"]
    del serialized_cuttings_object["cuttings_name"]

    with pytest.raises(ValidationError):
        datamodel.models.cuttings.Cuttings(**serialized_cuttings_object)


def test_cuttings_view():
    '''
    AC: Data should be validated against the datamodel before being saved to the database
    AC: User should be prompted with validation errors coming from the datamodel
    AC: Reverse url after submiting a form
    '''
    # When user submits a url requests to cuttings
    # Then the user should be redirected to the cuttings form




    pass